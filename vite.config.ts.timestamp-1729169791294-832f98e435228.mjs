// vite.config.ts
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///P:/pphome/_SongMingHe/node_modules/.pnpm/vite@5.4.8_@types+node@20.16.10/node_modules/vite/dist/node/index.js";
import vue from "file:///P:/pphome/_SongMingHe/node_modules/.pnpm/@vitejs+plugin-vue@5.1.4_vite@5.4.8_@types+node@20.16.10__vue@3.5.10_typescript@5.4.5_/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///P:/pphome/_SongMingHe/node_modules/.pnpm/@vitejs+plugin-vue-jsx@4.0.1_vite@5.4.8_@types+node@20.16.10__vue@3.5.10_typescript@5.4.5_/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";

// build.ts
import * as fs2 from "fs";
import grayMatter from "file:///P:/pphome/_SongMingHe/node_modules/.pnpm/gray-matter@4.0.3/node_modules/gray-matter/index.js";

// buildUtils.ts
import MarkdownIt from "file:///P:/pphome/_SongMingHe/node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/index.mjs";
import * as fs from "fs";
var formateDate = (srcDate) => {
  let srcDateObj = srcDate;
  if (typeof srcDate === "string") {
    srcDateObj = new Date(Date.parse(srcDate));
  }
  return `${srcDateObj.getFullYear()}-${String(srcDateObj.getMonth() + 1).padStart(2, "0")}-${String(srcDateObj.getDate()).padStart(2, "0")}`;
};
var rmdir = (rmdirPath) => {
  try {
    fs.rmSync(rmdirPath, { recursive: true });
  } catch (err) {
    if (err && err.code !== "ENOENT") {
      throw err;
    }
  }
  fs.mkdirSync(rmdirPath);
};
var createMD = (imgPath) => {
  return MarkdownIt({
    html: true,
    // 在源码中启用 HTML 标签
    xhtmlOut: false,
    // 使用 '/' 来闭合单标签 （比如 <br />）。
    // 这个选项只对完全的 CommonMark 模式兼容。
    breaks: false,
    // 转换段落里的 '\n' 到 <br>。
    langPrefix: "language-",
    // 给围栏代码块的 CSS 语言前缀。对于额外的高亮代码非常有用。
    linkify: false,
    // 将类似 URL 的文本自动转换为链接。
    // 启用一些语言中立的替换 + 引号美化
    typographer: false,
    // 双 + 单引号替换对，当 typographer 启用时。
    // 或者智能引号等，可以是 String 或 Array。
    //
    // 比方说，你可以支持 '«»„“' 给俄罗斯人使用， '„“‚‘'  给德国人使用。
    // 还有 ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] 给法国人使用（包括 nbsp）。
    quotes: "\u201C\u201D\u2018\u2019",
    // 高亮函数，会返回转义的HTML。
    // 或 '' 如果源字符串未更改，则应在外部进行转义。
    // 如果结果以 <pre ... 开头，内部包装器则会跳过。
    highlight: function() {
      return "";
    }
  });
  md.use((md2) => {
    const rawImageRule = md2.renderer.rules.image;
    md2.renderer.rules.image = (tokens, idx, options, env, self) => {
      const token = tokens[idx];
      const link = token.attrGet("src");
      if (link) {
        token.attrSet("src", imgPath + link);
      }
      return rawImageRule(tokens, idx, options, env, self);
    };
    const createHtmlRule = (rawHtmlRule) => (tokens, idx, options, env, self) => {
      tokens[idx].content = tokens[idx].content.replace(
        /(<img\b.*?src=)(['"])(.*?)\2/gs,
        (_, prefix, quote, src) => `${prefix}${quote}${imgPath + src.trim()}${quote}`
      ).replace(
        /(<img\b.*?srcset=)(['"])(.*?)\2/gs,
        (_, prefix, quote, srcset) => `${prefix}${quote}${srcset.split(",").map(
          (item) => item.trim().replace(
            /^([^ ]*?)([ \n].*)?$/,
            (__, url, descriptor = "") => `${imgPath + url.trim()}${descriptor.replace(/[ \n]+/g, " ").trimEnd()}`
          )
        ).join(", ")}${quote}`
      );
      return rawHtmlRule(tokens, idx, options, env, self);
    };
    const rawHtmlBlockRule = md2.renderer.rules.html_block;
    const rawHtmlInlineRule = md2.renderer.rules.html_inline;
    md2.renderer.rules.html_block = createHtmlRule(rawHtmlBlockRule);
    md2.renderer.rules.html_inline = createHtmlRule(rawHtmlInlineRule);
  });
};
var err_throw = (error) => {
  if (error) {
    console.error(error);
    throw error;
  }
};

// build.ts
var build_default = (srcMDFilePath = `./src/md/`, mdPagesPath = "pages/", absMDPagesPath = `./src/assets/${mdPagesPath}`, imgPath = "/", absImgPath = `./public${imgPath}`) => {
  let blogPages = [];
  let tags = /* @__PURE__ */ new Map();
  let categories = /* @__PURE__ */ new Map();
  const md2 = createMD(imgPath);
  rmdir(absMDPagesPath);
  fs2.readdirSync(srcMDFilePath).forEach((file) => {
    const filePath = srcMDFilePath + file;
    if (!file.endsWith(".md")) {
      fs2.cpSync(filePath, absImgPath + file, { recursive: true });
      return;
    }
    const mdContent = fs2.readFileSync(filePath, "utf8");
    const { data, content } = grayMatter(mdContent, { excerpt: false });
    if (data.date) {
      data.date = formateDate(data.date);
    } else {
      data.date = formateDate(/* @__PURE__ */ new Date());
    }
    data.tag.forEach((tag) => tags.set(tag, ""));
    categories.set(data.category, "");
    const htmlContent = md2.render(content);
    fs2.writeFile(absMDPagesPath + file.replace(".md", ".html"), htmlContent, err_throw);
    blogPages.push({
      profile: data,
      htmlContent,
      path: `/${mdPagesPath}${file.replace(".md", ".html")}`,
      name: file.replace(".md", "")
    });
  });
  blogPages = blogPages.sort((a, b) => {
    return b.profile.date.localeCompare(a.profile.date);
  });
  fs2.writeFileSync(`${absMDPagesPath}blogPages.json`, JSON.stringify({
    blogPages,
    tags: Object.keys(tags),
    categories: Object.keys(categories)
  }));
};

// vite.config.ts
var __vite_injected_original_import_meta_url = "file:///P:/pphome/_SongMingHe/vite.config.ts";
build_default();
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    vueJsx()
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  server: {
    // 监听地址 0.0.0.0
    host: true
  },
  // https://cn.vite.dev/config/shared-options.html#base
  base: "/SongMingHe/",
  build: {
    // outDir: '/SongMingHe/',
    // emptyOutDir: true,
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
